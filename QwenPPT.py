import openai
import json
import argparse
import time
import random
from pptx import Presentation


def robot_print(text):
    for char in text:
        print(char, end="", flush=True)
        time.sleep(random.uniform(0.01, 0.05))  # 使用更平滑的随机延迟
    print("\r")


def chatppt(topic: str, pages: int, api_key: str, language: str):
    language_map = {"cn": "Chinese", "en": "English"}
    language = language_map[language]

    output_format = {
        "title": "example title",
        "pages": [
            {
                "title": "title for page 1",
                "content": [
                    {
                        "title": "title for bullet 1",
                        "description": "detail for bullet 1",
                    },
                    {
                        "title": "title for bullet 2",
                        "description": "detail for bullet 2",
                    },
                ],
            }
        ],
    }

    messages = [
        {
            "role": "user",
            "content": f"I'm going to prepare a presentation about {topic}, please help outline detailed content. Output as JSON format, strictly following this structure: {json.dumps(output_format)}, generate {pages} pages with as many bullet points as possible, and return only JSON content in {language}.",
        },
    ]

    robot_print(f"I'm working hard to generate your PPT about {topic}.")
    robot_print("It may take a few minutes.")
    robot_print(f"Your PPT will be generated in {language}")

    # 使用新版 OpenAI 客户端
    client = openai.OpenAI(
        api_key=api_key,
        base_url="https://dashscope.aliyuncs.com/compatible-mode/v1",
    )

    try:
        completion = client.chat.completions.create(
            model="qwen-plus",
            messages=messages
        )

        content = completion.choices[0].message.content
        content = json.loads(content.strip())  # 解析 JSON

        return content
    except Exception as e:
        print("PPT 生成失败，请稍后重试...")
        print(f"错误信息: {e}")
        exit(1)


def generate_ppt(content: dict, template=None):
    ppt = Presentation(template) if template else Presentation()

    # 创建封面页
    first_slide_layout = ppt.slide_layouts[0]  # 标题幻灯片
    slide = ppt.slides.add_slide(first_slide_layout)
    slide.shapes.title.text = content.get("title", "Untitled PPT")
    slide.placeholders[1].text = "Generated by ChatPPT"

    pages = content.get("pages", [])
    robot_print(f"Your PPT will have {len(pages)} slides.")

    for i, page in enumerate(pages):
        page_title = page.get("title", f"Slide {i+1}")
        robot_print(f"Generating page {i+1}: {page_title}")

        # 创建内容页
        bullet_layout = ppt.slide_layouts[1]  # 标题 + 内容
        slide = ppt.slides.add_slide(bullet_layout)
        slide.shapes.title.text = page_title

        body_shape = slide.shapes.placeholders[1]
        text_frame = body_shape.text_frame

        for bullet in page.get("content", []):
            p1 = text_frame.add_paragraph()
            p1.text = bullet.get("title", "No title")
            p1.level = 0  # 一级标题

            p2 = text_frame.add_paragraph()
            p2.text = bullet.get("description", "No description")
            p2.level = 1  # 二级描述

    ppt_name = f"./{content.get('title', 'Generated')}.pptx"
    ppt.save(ppt_name)
    robot_print("PPT 生成完成！")
    robot_print(f"文件已保存为: {ppt_name}")


def main(topic: str, pages: int, api_key: str, language: str, template_path=None):
    robot_print("Hi, I am your PPT assistant.")
    robot_print("I am powered by ChatGPT")

    ppt_content = chatppt(topic, pages, api_key, language)
    generate_ppt(ppt_content)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="I am your PPT assistant, I can help generate PPT.")

    parser.add_argument("-t", "--topic", type=str, required=True, help="Your topic name")
    parser.add_argument("-k", "--api_key", type=str, required=True, help="Your OpenAI API key")
    parser.add_argument("-p", "--pages", type=int, required=False, default=5, help="Number of slides")
    parser.add_argument("-l", "--language", choices=["cn", "en"], default="en", required=False, help="Output language")

    args = parser.parse_args()
    main(args.topic, args.pages, args.api_key, args.language)
